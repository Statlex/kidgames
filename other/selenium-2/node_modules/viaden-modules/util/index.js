(function () {

	"use strict";
	/*global */

	var util, fs, webDriver, mainCfg, path, startPath;

	fs = require('fs');

	webDriver = require('selenium-webdriver');

	mainCfg = require('viaden-modules/config/main.js');

	path = require('path');

	startPath = process.cwd();

	util = {

		keyList: ['isDevice', 'isSendMail'],

		attributes: {

		},

		trueFn: function () {
			return true;
		},

		falseFn: function () {
			return false;
		},

		get: function (key) {
			return this.attributes[key];
		},

		set: function (key, value) {
			return this.attributes[key] = value;
		},

		createWebDriverClient: function(args) {

			args = args || {};

			var args = this.get('args'),
				driver = new webDriver
					.Builder()
					//.usingServer(args.isMobile ? mainConfig.host.mobile : '')
					.withCapabilities({ browserName: args.browser })
					.build();

			//driver.manage().timeouts().implicitlyWait(150);

			switch (args.size) {

				case 'mobile':

					// set mobile size

					break;

				case 'tablet':

					// set tablet size

					break;



			}

			//driver.manage().window().setSize(mainConfig.screen.width, mainConfig.screen.height);


			return driver;

		},
		getTest: function (list) {

			if (list) {
				if (list.indexOf(',') !== -1) {
					return list.replace(/\s+/, '').replace(/,/g, '.js,').split(',');

				} else {
					return [ list.trim() + '.js' ];
				}
			}

			return fs.readdirSync( path.resolve(startPath, mainCfg.folder.test) );

		},
		getStartPath: function () {
			return startPath;
		},

		scrollTo: function(driver, selector) {
			driver.executeScript("document.querySelector('" + selector + "').scrollIntoView(true); window.scrollBy(0, 100);");
		},

		argsInit: function () {

			var reIsBool = /^(true|false)$/,
				reIsNumber = /^((\d+(\.\d+)?)|(\.\d+))$/, // 1.2 || .3
				data = {},
				definedParams = mainCfg.definedParams,
				key;

			process.argv.forEach(function (val) {

				var arr, key, value;

				arr = val.split('=');
				key = arr.shift();
				value = arr.join('=');

				if ( key[0] === '-' ) {
					data[key] = false;
					return;
				}

				if ( key[0] === '+' ) {
					data[key] = true;
					return;
				}

				if ( reIsBool.test(value) ) {
					data[key] = 'true' === value;
					return;
				}

				if ( reIsNumber.test(value) ) {
					data[key] = parseFloat(value);
					return;
				}

				data[key] = value;

			}, this);

			for (key in definedParams) {
				if (definedParams.hasOwnProperty(key) && !data.hasOwnProperty(key)) {
					data[key] = definedParams[key];
				}
			}

			this.set('args', data);

			return data;

		}

	};

	util.argsInit();

	module.exports = util;

}());
